name: CI Github Actions

on:
  push:
    branches:
    - main
    tags:
    - '*'
  pull_request:

concurrency:
  group: continous-integration-${{ github.ref }}  # branch or tag name
  cancel-in-progress: true

jobs:
  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        test:
        - test-gh-actions
        os: [ ubuntu-latest ]
        python-version: [ 3.7, 3.8 ]

    steps:
    - name: Checkout git repository üïù
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }} üêç
      uses: actions/setup-python@dc73133d4da04e56a135ae2246682783cc7c7cb6  # v2.2.2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Read Poetry Version üî¢
      run: |
        echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
      shell: bash

    - name: Install poetry ü¶Ñ
      uses: Gr1N/setup-poetry@v7
      with:
        poetry-version: ${{ env.POETRY_VERSION }}

    - name: Load Poetry Cached Libraries ‚¨á
      id: cache-poetry
      uses: actions/cache@v2
      with:
        path: .venv
        key: ${{ runner.os }}-poetry-${{ env.POETRY_VERSION }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}-venv-${{ secrets.POETRY_CACHE_VERSION }}-${{ env.pythonLocation }}

    - name: Clear Poetry cache
      if: steps.cache-poetry.outputs.cache-hit == 'true' && contains(github.event.pull_request.labels.*.name, 'tools:clear-poetry-cache-unit-tests')
      run: rm -r .venv

      # Poetry >= 1.1.0b uses virtualenv to create a virtual environment.
      # The virtualenv simply doesn't work on Windows with our setup,
      # that's why we use venv to create virtual environment
    - name: Create virtual environment
      if: (steps.cache-poetry.outputs.cache-hit != 'true' || contains(github.event.pull_request.labels.*.name, 'tools:clear-poetry-cache-unit-tests')) && needs.changes.outputs.backend == 'true'
      run: python -m venv create .venv

    - name: Set up virtual environment
      # Poetry on Windows cannot pick up the virtual environments directory properly,
      # and it creates a new one every time the pipeline runs.
      # This step solves this problem ‚Äî¬†it tells poetry to always use `.venv` directory inside
      # the project itself, which also makes it easier for us to determine the correct directory
      # that needs to be cached.
      run: poetry config virtualenvs.in-project true

    - name: Install Dependencies üì¶
      run: |
        sudo apt-get -y install libpq-dev
        make install-full | tee .output
        if grep 'The lock file is not up to date' .output; then exit 1; fi
        make prepare-tests-ubuntu

    - name: Test Code üîç
      env:
        JOBS: 1  # TODO 2
        PYTHONIOENCODING: "utf-8"
      run: |
        make ${{ matrix.test }}
        poetry run coverage xml -o ${{ github.workspace }}/tests/${{ matrix.test }}-coverage.xml --include="rasa/*"
