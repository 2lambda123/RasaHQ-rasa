name: Debug datadog

on:
  push

jobs:
  test:
    name: Run Debug datadog
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest]
        python-version: [ 3.7 ]

    steps:
    - name: Run DataDog Agent
      run: |
        docker run -d --name dd_agent -p 8125:8125/udp -p 8126:8126 -v /var/run/docker.sock:/var/run/docker.sock:ro -v /proc/:/host/proc/:ro -v /sys/fs/cgroup/:/host/sys/fs/cgroup:ro -e "DD_HOSTNAME=none"  -e DD_API_KEY=${{ secrets.DD_API_KEY }} -e DD_SITE="datadoghq.eu" -e DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true -e "DD_INSIDE_CI=true" -e GITHUB_ACTIONS=true -e CI=true gcr.io/datadoghq/agent:7
        docker ps --all --filter name=dd_agent --filter status=running --no-trunc --format "{{.ID}} {{.Status}}"
        docker port dd_agent

    - name: Checkout git repository üïù
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }} üêç
      uses: actions/setup-python@dc73133d4da04e56a135ae2246682783cc7c7cb6  # v2.2.2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Read Poetry Version üî¢
      run: |
        echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
      shell: bash

    - name: Install poetry ü¶Ñ
      uses: Gr1N/setup-poetry@v7
      with:
        poetry-version: ${{ env.POETRY_VERSION }}

    - name: Create virtual environment
      run: python -m venv create .venv

    - name: Set up virtual environment
      # Poetry on Windows cannot pick up the virtual environments directory properly,
      # and it creates a new one every time the pipeline runs.
      # This step solves this problem ‚Äî¬†it tells poetry to always use `.venv` directory inside
      # the project itself, which also makes it easier for us to determine the correct directory
      # that needs to be cached.
      run: poetry config virtualenvs.in-project true

    - name: Install ddtrace and datadog
      run: poetry run pip install -U ddtrace datadog

    - name: Test Code üîç (monothread)
      # This is a temporary workaround for OOM on Windows caused by increased memory
      # consumption associated with the upgrade of our tensorflow dependency
      # see https://github.com/RasaHQ/rasa/issues/9734 for more information.
      # Once the memory issues have been addressed, all configurations should be run on
      # multiple threads
      env:
        JOBS: 1
        PYTHONIOENCODING: "utf-8"
        DD_ENV: regression-tests
        DD_SERVICE: rasa
        DD_ARGS: --ddtrace
      run: |
        python run_metric.py
