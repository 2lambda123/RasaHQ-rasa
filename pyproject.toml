[build-system]
requires = ["poetry-core>=1.0.4"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310"]
exclude = "(\\.eggs|\\.git|\\.pytest_cache|build|dist)"

[tool.poetry]
name = "rasa"
version = "3.7.0a1"
description = "Open source machine learning framework for text- and voice-based conversations."
authors = ["Rasa Technologies GmbH <hi@rasa.com>"]
maintainers = ["Tom Bocklisch <tom@rasa.com>"]
homepage = "https://rasa.com"
repository = "https://github.com/rasahq/rasa"
documentation = "https://rasa.com/docs"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Topic :: Software Development :: Libraries"
]
keywords = [
    "nlp", "machine-learning", "bot", "conversational-ai", "chatbot", "rasa"
]
readme = "README.md"
license = "Apache-2.0"
include = [
    "LICENSE.txt", "README.md", "rasa/shared/core/training_data/visualization.html", 
    "rasa/cli/default_config.yml", "rasa/shared/importers/*", "rasa/utils/schemas/*", "rasa/keys"
]
[[tool.poetry.source]]
name = "internal repository mirroring psycopg binary for macos"
url = "https://pypi.org/simple/"

[tool.poetry.dependencies]
python = ">=3.10,<3.11"
rasa-sdk = ">=3.6.2"
aiohttp = ">=3.10.2"
boto3 = "^1.26.136"
requests = "^2.23"
matplotlib = ">=3.1"
attrs = ">=19.3"
redis = ">=4.5.3"
tqdm = "^4.31"
networkx = ">=2.4"
"ruamel.yaml" = ">=0.16.5"
pyyaml = ">=6.0"
SQLAlchemy = ">=1.4.0"
protobuf = ">=4.23.3"
cloudpickle = ">=1.2"
jsonschema = ">=3.2"
tensorflow_hub = "*"
setuptools = ">=65.5.1"
certifi = ">=2023.7.22"
cryptography = ">=43.0.1"
structlog = "^23.1.0"
structlog-sentry = "^2.0.2"
pydantic = { extras = ["dotenv"], version = "^2" }
pydantic-settings = "^2"


# TensorFlow-related dependencies for different platforms
tensorflow = { version = "2.14.0", markers = "sys_platform != 'darwin' or platform_machine != 'arm64'" }
tensorflow-intel = { version = "2.14.0", markers = "sys_platform == 'win32'" }
tensorflow-cpu-aws = { version = "2.14.0", markers = "sys_platform == 'linux' and (platform_machine == 'arm64' or platform_machine == 'aarch64')" }
tensorflow-macos = { version = "2.14.0", markers = "sys_platform == 'darwin' and platform_machine == 'arm64'" }
tensorflow-text = { version = "2.14.0", markers = "sys_platform != 'win32' and platform_machine != 'arm64' and platform_machine != 'aarch64'" }
tensorflow-metal = { version = "*", markers = "sys_platform == 'darwin' and platform_machine == 'arm64'", optional = true }

# TensorFlow IO GCS Filesystem with platform-specific markers
tensorflow-io-gcs-filesystem = [
    { version = ">=0.31", markers = "sys_platform == 'win32'" },
    { version = ">=0.32", markers = "sys_platform == 'linux'" },
    { version = ">=0.32", markers = "sys_platform == 'darwin' and platform_machine != 'arm64'" }
]


# Extra packages
transformers = { version = ">=4.13.0", optional = true }
sentencepiece = { version = "~0.1.99", optional = true }
spacy = { version = "^3.4", markers = "sys_platform == 'darwin' and platform_machine == 'arm64'", optional = true }

[tool.poetry.extras]
spacy = ["spacy"]
transformers = ["transformers", "sentencepiece"]
full = ["spacy", "transformers", "sentencepiece"]
metal = [ "tensorflow-metal",]

# Development dependencies
[tool.poetry.dev-dependencies]
pytest-sanic = { git = "https://github.com/RasaHQ/pytest-sanic", branch = "fix_signal_issue" }

[tool.mypy]
ignore_missing_imports = true
show_error_codes = true
warn_unused_ignores = true
disallow_untyped_calls = true

[tool.ruff]
ignore = ["D100", "D104", "D105", "RUF001", "RUF002"]
line-length = 88
select = ["D", "E", "F", "W", "RUF"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.per-file-ignores]
"tests/test_telemetry.py" = ["E501"]
"tests/shared/core/test_domain.py" = ["E501"]

[tool.pytest.ini_options]
python_functions = "test_"
filterwarnings = ["ignore::ResourceWarning:ruamel[.*]"]
timeout = 60
asyncio_mode = "auto"
